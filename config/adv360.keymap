
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
  behaviors {
    #include "macros.dtsi"
    #include "version.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
     &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5                       &tog 1                                                                                      &mo 3  &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
       &kp TAB      &kp Q     &kp W     &kp E      &kp R   &kp T                        &none                                                                                      &none   &kp Y   &kp U      &kp I     &kp O     &kp P   &kp BSLH
 &mt LCTRL ESC      &kp A     &kp S     &kp D      &kp F   &kp G            &kp LC(LG(SPACE))  &mt LCMD LS(LC(LA(LG(SPACE))))     &sl 4                   &kp RALT  &kp RCTRL      &none   &kp H   &kp J      &kp K     &kp L  &kp SEMI    &kp SQT
     &kp LSHFT      &kp Z     &kp X     &kp C      &kp V   &kp B                                                               &kp HOME                  &kp PG_UP                         &kp N   &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp RSHFT
         &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                             &kp BSPC                         &kp DEL   &kp END                  &kp PG_DN  &kp ENTER  &kp SPACE          &kp UP   &kp DOWN  &kp LBKT  &kp RBKT      &mo 2
            >;
        };

        layer_keypad {
            bindings = <
 &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5              &trans                                                                 &mo 3  &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
   &kp TAB      &kp Q     &kp W     &kp E      &kp R   &kp T               &none                                                                 &none   &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS   &kp BSLH
   &kp ESC      &kp A     &kp S     &kp D      &kp F   &kp G               &none  &kp LCTRL  &kp LALT                   &kp LGUI  &kp RCTRL      &none   &kp H   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS    &kp SQT
 &kp LSHFT      &kp Z     &kp X     &kp C      &kp V   &kp B                                 &kp HOME                  &kp PG_UP                         &kp N   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_ENTER  &kp RSHFT
     &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                    &kp BSPC    &kp DEL   &kp END                  &kp PG_DN  &kp ENTER  &kp KP_N0              &kp UP      &kp DOWN     &kp KP_DOT         &kp RBKT      &mo 2
            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2         &kp F3  &kp F4        &kp F5  &kp F6                    &tog 1                                                               &mo 3  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
 &trans  &trans         &trans  &trans  &kp C_REPEAT  &trans                     &none                                                               &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &kp C_SHUFFLE  &trans        &trans  &trans                     &none      &trans  &trans                  &trans      &trans       &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans         &trans  &trans        &trans  &trans                                        &trans                  &trans                          &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans         &trans  &trans        &trans                    &kp C_PREVIOUS  &kp C_NEXT  &trans                  &trans  &kp C_STOP  &kp C_PLAY          &trans  &trans   &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &none                                                                          &trans   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none            &bootloader                                                                     &bootloader   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none                  &none   &none   &none                  &bt BT_CLR       &none  &rgb_ug RGB_MEFS_CMD 5   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none    &macro_ver         &none                                  &none                       &none                                       &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none                                &none   &none   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG          &bl BL_INC  &bl BL_DEC   &none   &none   &none
            >;
        };

        layer_hyper {
            bindings = <
 &trans      &kp LS(LC(LA(LG(1))))  &kp LS(LC(LA(LG(2))))           &kp LS(LC(LA(LG(3))))            &kp LS(LC(LA(LG(4))))  &kp LS(LC(LA(LG(5))))                                   &trans                                                                                                            &trans  &kp LS(LC(LA(LG(6))))         &kp LS(LC(LA(LG(7))))           &kp LS(LC(LA(LG(8))))             &kp LS(LC(LA(LG(9))))              &kp LS(LC(LA(LG(0))))         &kp LS(LC(LA(LG(MINUS))))
 &trans      &kp LS(LC(LA(LG(Q))))  &kp LS(LC(LA(LG(W))))           &kp LS(LC(LA(LG(E))))            &kp LS(LC(LA(LG(R))))  &kp LS(LC(LA(LG(T))))                                   &trans                                                                                                            &trans  &kp LS(LC(LA(LG(Y))))         &kp LS(LC(LA(LG(U))))           &kp LS(LC(LA(LG(I))))             &kp LS(LC(LA(LG(O))))              &kp LS(LC(LA(LG(P))))     &kp LS(LC(LA(LG(BACKSLASH))))
 &trans      &kp LS(LC(LA(LG(A))))  &kp LS(LC(LA(LG(S))))           &kp LS(LC(LA(LG(D))))            &kp LS(LC(LA(LG(F))))  &kp LS(LC(LA(LG(G))))                                   &trans                      &trans  &trans                  &trans                     &trans                     &trans  &kp LS(LC(LA(LG(H))))         &kp LS(LC(LA(LG(J))))           &kp LS(LC(LA(LG(K))))             &kp LS(LC(LA(LG(L))))      &kp LS(LC(LA(LG(SEMICOLON))))  &kp LS(LC(LA(LG(SINGLE_QUOTE))))
 &trans      &kp LS(LC(LA(LG(Z))))  &kp LS(LC(LA(LG(X))))           &kp LS(LC(LA(LG(C))))            &kp LS(LC(LA(LG(V))))  &kp LS(LC(LA(LG(B))))                                                                       &trans                  &trans                                                        &kp LS(LC(LA(LG(N))))         &kp LS(LC(LA(LG(M))))       &kp LS(LC(LA(LG(COMMA))))        &kp LS(LC(LA(LG(PERIOD))))          &kp LS(LC(LA(LG(SLASH))))                            &trans
 &trans  &kp LS(LC(LA(LG(TILDE))))                 &trans  &kp LS(LC(LA(LG(LEFT_ARROW))))  &kp LS(LC(LA(LG(RIGHT_ARROW))))                                   &kp LS(LC(LA(LG(BACKSPACE))))  &kp LS(LC(LA(LG(DELETE))))  &trans                  &trans  &kp LS(LC(LA(LG(ENTER))))  &kp LS(LC(LA(LG(SPACE))))                         &kp LS(LC(LA(LG(UP_ARROW))))  &kp LS(LC(LA(LG(DOWN_ARROW))))  &kp LS(LC(LA(LG(LEFT_BRACKET))))  &kp LS(LC(LA(LG(RIGHT_BRACKET))))                            &trans
            >;
        };

    };
};
